/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin editor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
FilterGuiDemoAudioProcessorEditor::FilterGuiDemoAudioProcessorEditor (FilterGuiDemoAudioProcessor& p)
    : AudioProcessorEditor (&p), processor (p), customLookAndFeel(),
      filterResponseDisplay(processor.getAudioFilter()), frequencyCutoffSlider(new CustomSlider (*processor.filterCutoffParam)),filterGainSlider(new CustomSlider (*processor.filterGainParam))
{
    // Make sure that before the constructor has finished, you've set the
    // editor's size to whatever you need it to be.
    setSize (600, 500);
    
    FilterGuiDemoAudioProcessorEditor::setLookAndFeel(&customLookAndFeel);
    
    //Setup Components
    addAndMakeVisible(*frequencyCutoffSlider);
    frequencyCutoffSlider->setName("FilterCutoff");
    frequencyCutoffSlider->setSliderStyle(Slider::Rotary);
    frequencyCutoffSlider->setRange(20.00, 20000.00);
    
    //Logarithmic frequency - 0.5 skew factor effectivley makes this a volt-octave knob.
    frequencyCutoffSlider->setSkewFactor(0.5);
    frequencyCutoffSlider->setColour(Slider::rotarySliderOutlineColourId, Colours::greenyellow);
    frequencyCutoffSlider->setColour(Slider::rotarySliderFillColourId, Colours::greenyellow);
    
    addAndMakeVisible(*filterGainSlider);
    filterGainSlider->setName("FilterGain");
    filterGainSlider->setSliderStyle(Slider::Rotary);
    filterGainSlider->setRange(0.0, 1.0, 0.05);
    filterGainSlider->setColour(Slider::rotarySliderOutlineColourId, Colours::greenyellow);
    filterGainSlider->setColour(Slider::rotarySliderFillColourId, Colours::greenyellow);
    
    addAndMakeVisible(filterCutoffLabel);
    filterCutoffLabel.setText("Cutoff", juce::NotificationType::dontSendNotification);
    filterCutoffLabel.setFont(Font ("Cracked", 27.50f, Font::plain));
    filterCutoffLabel.setColour(Label::textColourId, Colours::greenyellow);
    
    addAndMakeVisible(filterGainLabel);
    filterGainLabel.setText("Gain", juce::NotificationType::dontSendNotification);
    filterGainLabel.setFont(Font ("Cracked", 27.50f, Font::plain));
    filterGainLabel.setColour(Label::textColourId, Colours::greenyellow);
    
    addAndMakeVisible(filterTypeDropDown);
    filterTypeDropDown.addItem("LowPass", 1);
    filterTypeDropDown.addItem("HighPass", 2);
    filterTypeDropDown.setColour(ComboBox::outlineColourId, Colours::greenyellow);
    filterTypeDropDown.setColour(ComboBox::backgroundColourId, Colours::black);
    filterTypeDropDown.setColour(ComboBox::textColourId, Colours::greenyellow);
    filterTypeDropDown.setColour(ComboBox::buttonColourId, Colours::greenyellow);
    filterTypeDropDown.setSelectedId(1);
    filterTypeDropDown.addListener(this);
    
    addAndMakeVisible(filterResponseDisplay);
    filterResponseDisplay.setMagResponseColour(Colours::greenyellow);
    filterResponseDisplay.setDisplayBackgroundColour(Colours::darkgrey);
    filterResponseDisplay.setBounds(50, 125, 500, 200);
    
    //Add the filter display as a listener to the cutoff and gain sliders for updates.
    frequencyCutoffSlider->addListener(&filterResponseDisplay);
    filterGainSlider->addListener(&filterResponseDisplay);
}

FilterGuiDemoAudioProcessorEditor::~FilterGuiDemoAudioProcessorEditor()
{
}


//==============================================================================
void FilterGuiDemoAudioProcessorEditor::comboBoxChanged(ComboBox* comboBoxThatChanged)
{
    //In here set filter type and also update filter response display's filter type
    if (comboBoxThatChanged == &filterTypeDropDown)
    {
        int filterTypeIndex = filterTypeDropDown.getSelectedItemIndex();
        processor.getAudioFilter().setFilterType(filterTypeIndex);
        
        //Repaint response display for filter type change
        filterResponseDisplay.repaint();
    }
}

//==============================================================================
void FilterGuiDemoAudioProcessorEditor::paint (Graphics& g)
{
    g.fillAll (Colours::black);
}

void FilterGuiDemoAudioProcessorEditor::resized()
{
    filterResponseDisplay.setBounds(50, 125, 500, 200);
    filterTypeDropDown.setBounds(225, 50, 150, 30);
    
    filterCutoffLabel.setBounds(85, 358, 130, 20);
    frequencyCutoffSlider->setBounds(50, 386, 135, 105);
    frequencyCutoffSlider->setTextBoxStyle(juce::Slider::TextEntryBoxPosition::TextBoxBelow, true, 75, 20);
    
    filterGainLabel.setBounds(443, 358, 130, 20);
    filterGainSlider->setBounds(400, 386, 135, 105);
    filterGainSlider->setTextBoxStyle(juce::Slider::TextEntryBoxPosition::TextBoxBelow, true, 75, 20);
}
